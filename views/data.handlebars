<div>
	<script>
		function downloadScript(url) {
			downloadScriptFunction:{
				if (localStorage) {
					try {
						var theData = JSON.parse(localStorage.getItem(url));
						if (theData[1].length == theData[0]) {
							break downloadScriptFunction;
						}
					} catch (e) {
					}
					$.get(url, function (data) {
						localStorage.setItem(url, JSON.stringify([data.length, data]))
					});
				}
			}
		}
		[
			'/js/svg.js',
			'/js/pwgmodal.min.js',
			'/js/jquery.qtip.min.js'
		].forEach(function (src) {
			var content = $("#content");
			parse:{
				try {
					if (localStorage && localStorage.getItem(src)) {
						var theData = JSON.parse(localStorage.getItem(src));
						if (theData[1].length == theData[0]) {
							content.append($("<script>" + theData[1] + "<\/script>"));
							break parse;
						}
					}
				} catch (e) {
				}
				content.append($("<script src=\"" + src + "\"><\/script>"));
				downloadScript(src);
			}
		})
	</script>
	<link rel="stylesheet" type="text/css" href="/css/jquery.qtip.min.css">
	<link rel="stylesheet" type="text/css" href="/css/pwgmodal.min.css">
	<div class="tabs">
		<ul class="tab-links">
			{{#each panels}}
				<li class="{{#if active}}active{{/if}}"><a href="/data/{{@key}}">{{name}} Event</a>
				</li>
			{{/each}}
		</ul>
	</div>
	<h1 style="display:inline;">{{selectedEvent.name}} Event</h1>
	<small style="display:inline;color:#333;">Hover over or tap on the event number to view time and sheet number.
	</small>
	<br>
	<br>
	<div id="drawing"></div>
	<script>
		function htmlEntities(str) {
			return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
		}
		var events = {{#if data}} {{{data}}} {{else}} {} {{/if}};
		var selected = {{selected}};
		var text;
		var cellWidth = 140;
		var cellHeight = 22;
		//$('#drawing').empty();
		$('.tab-links>li').click(function (e) {
			e.preventDefault();
			console.log('click');
			$('.tab-links .active').removeClass('active');
			$(this).addClass('active');
			var href = $(this).find('a').attr('href');
			history.pushState([href, "/data"], "", href);
			$('#content').find('h1').text($(this).text());
			selected = $(this).index() + 1;
			drawDraws();
			return false;
		});

		$(document).ready(function () {
			window.draw = SVG('drawing').size(970, 800);
			drawDraws();
		});

		function drawDraws() {
			console.log(draw);
			draw.clear();
			var current = 0;
			var xPos = 0;
			var oldEvent = Math.min.apply(Math, Object.keys(events)) - 1;
			var maxCurrent = 0;
			var timesreset = 0;
			Object.keys(events).forEach(function (value, key) {
				renderLoop: {
					key = parseInt(value);
					value = events[value];
					if (Math.floor(key / 100) !== selected) {
						break renderLoop;
					}
					if (oldEvent + 1 !== key) {
						current = 18 * (Math.pow(2, timesreset + 2) - 2);
						xPos += 200;
						timesreset++;
					}
					if (key === 151) {
						var cbak = current;
						var xbak = xPos;
						current = 1080;
						xPos -= 200;
					}
					oldEvent = key;
					var regexTo = /^(?:.*to)?(.*)$/i;
					var popup = function(e){
						console.log(e);
						$('.clickthrough').qtip('hide');
						var content = '<h2 class="nomargin">' + htmlEntities(value.teams[0] || "Undecided") + ' vs ' + htmlEntities(value.teams[1] || "Undecided") + '</h2>' +
								'<br /><h3 class="nomargin">At '+value.time+'</h3>'+
								'<br /><h3 class="nomargin">Draw Number '+key.toString()+'</h3>';
						if(value.winner) content += '<br /><h3 class="nomargin">Winner: '+value.winner+'</h3>';
						content += '<br /><h3 class="nomargin">Winner To: '+regexTo.exec(value.winnerTo)[1]+'</h3>';
						content += '<br /><h3 class="nomargin">Loser To: '+regexTo.exec(value.loserTo)[1]+'</h3>';
						$.pgwModal({
							content: content
						});
						return false;
					};
					draw.rect(30, cellHeight * 2).fill('#EEE').move(xPos, current);
					var eve = draw.foreignObject(30, cellHeight * 2).move(xPos, current);
					var child = eve.appendChild("a", {});
					$(child.node['childNodes'][0])
							.addClass('autoexempt')
							.click(popup);
					if (value['time'] + value['sheet'] !== "") {
						$(child.node['childNodes'][0]).qtip({
							style: {classes: 'qtip-dark clickthrough'},
							position: {
								target: 'mouse',
								adjust: {
									mouse: true
								}
							},
							content: {
								text: value['time'] + "<br />" + value['sheet']
							}
						});
					}
					$(child.node['childNodes'][0]).append($("<div>")).children().text(key.toString()).addClass("EventNumber");
					$(eve.appendChild("div").node['childNodes'][1])
							.addClass("EventNumberBorder");
					for (var j = 1; j < 3; j++) {
						var color = '#EEE';
						if (value.teams[j - 1] !== '' && value.teams[j - 1] === value.winner) {
							color = '#BBB';
						}
						if (value.teams[j - 1] !== '' && value.teams[j - 1] === value.winner && value.winnerTo.toString().includes('1st')) {
							color = '#da0';
						}
						draw.rect(cellWidth, cellHeight).fill(color).move(xPos + 30, current);

						var fobj = draw.foreignObject(cellWidth, cellHeight + 1).move(xPos + 30, current).appendChild("a", {});
						$(fobj.node['childNodes'][0]).addClass('autoexempt').click(popup);
						$(fobj.node['childNodes'][0]).append($('<div>')).children().text(value.teams[j - 1]);
						if ((key * 2 + (j - 1)) % 2 === 0) {
							$(fobj.appendChild('div').node['childNodes'][1]).addClass("borderTeam")
						}
						current += (key * 2 + (j - 1)) % 2 === 1 ? (9 * Math.pow(2, timesreset + 3) - 22) : cellHeight;
						if (current > maxCurrent && (key * 2 + (j - 1)) % 2 === 0) {
							maxCurrent = current + 22;
						}
					}
					if (key === 151) {
						current = cbak;
						xPos = xbak - 200;
						if (current > maxCurrent && (key * 2 + (j - 1)) % 2 === 0) {
							maxCurrent = current + 22;
						}
						timesreset--;
					}
				}
			});
			$('#drawing>svg').attr("height", maxCurrent);
		}

	</script>
</div>